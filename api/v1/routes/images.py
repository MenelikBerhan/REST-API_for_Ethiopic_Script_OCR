"""Image endpoints
"""
from db.mongodb import db_client
from fastapi import APIRouter, BackgroundTasks, Body, File, status, UploadFile
from models.images import ImageModel, ImageCollection, ImageRequestBody, ImagePostResponseModel
from os import path
from utils.file_read_write import background_write_file
from uuid import uuid4


# create a router with `/images` prefix
image_router = APIRouter(prefix='/images')


@image_router.get(
    '/',
    response_description='List all images',
    response_model=ImageCollection,
    response_model_by_alias=False,
    response_model_exclude_none=True,
)
async def list_images():
    """
    List all of the images in the database.

    The response is unpaginated and limited to 50 results.
    """
    return ImageCollection(images=await db_client.db['images'].find().to_list(50))


# Content-type will be multipart/form-data, `image_properties` is a stringfied
# dict which will be converted to dict in `ImageRequestBody` before validation.
# [Reference](https://stackoverflow.com/questions/65504438/how-to-add-both-file-and-json-body-in-a-fastapi-post-request/70640522#70640522)
@image_router.post(
    '/',
    response_description='Add new image',
    response_model=ImagePostResponseModel,
    status_code=status.HTTP_201_CREATED,
    response_model_by_alias=False,
    response_model_exclude_none=True,
)
async def create_image(
    background_tasks: BackgroundTasks,
    image_properties: ImageRequestBody = Body(default=None),
    file: UploadFile = File(...),
    ):
    """
    Insert a new image record into the database & save image in local storage.   
    """
    # set local file name by appending uuid value before the extension.
    # space in image files replaced by `_`
    base_name, ext = path.splitext(file.filename.replace(' ', '_'))
    file_name = f'{base_name}_{uuid4()}{ext}'

    # name of uploaded image (for db)
    image_dict = {'name': file.filename}

    # add fields set in request body to image_dict.
    if image_properties:
        image_dict.update(image_properties.model_dump(exclude_unset=True, exclude_none=True))

    # create an ImageModel using image_dict
    image = ImageModel(**image_dict)

    # create a dict for db excluding `id` (if `id` not in image dict default=None).
    # to use given id (z one in image_dict), set `by_alias=True` & remove exclude `id`.
    # to avoid saving null (unset) fields in db, use (exclude_unset=True, exclude_none=True)
    new_image_dict = image.model_dump(exclude=['id'])

    # insert the new image in db
    insert_result = await db_client.db['images'].insert_one(new_image_dict)

    # add id generated by mongodb to image attributes and return new image
    new_image_dict['id'] = insert_result.inserted_id

    # add a background task to retrieve image metadata and save image in local storage
    file_buffer = await file.read()  # can't pass file directly, it is closed before processing
    background_tasks.add_task(background_write_file, file_buffer, file_name, insert_result.inserted_id)

    return new_image_dict