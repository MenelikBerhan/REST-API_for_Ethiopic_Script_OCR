"""Image endpoints
"""
from fastapi import APIRouter
from db.mongodb import db_client
from models.images import ImageModel, ImageCollection, ImageRequestBody, ImageResponseModel
from fastapi import Body, File, HTTPException, status, UploadFile
from fastapi.encoders import jsonable_encoder
from utils.file_read_write import write_file


# create a router with `/images` prefix
image_router = APIRouter(prefix='/images')


@image_router.get(
    '/',
    response_description='List all images',
    response_model=ImageCollection,
    response_model_by_alias=False,
    response_model_exclude_none=True,
)
async def list_images():
    """
    List all of the images in the database.

    The response is unpaginated and limited to 50 results.
    """
    return ImageCollection(images=await db_client.db['images'].find().to_list(50))


# Content-type will be multipart/form-data, `image_properties` is a stringfied
# dict which will be converted to dict in `ImageRequestBody` before validation.
# [Reference](https://stackoverflow.com/questions/65504438/how-to-add-both-file-and-json-body-in-a-fastapi-post-request/70640522#70640522)
@image_router.post(
    '/',
    response_description='Add new image',
    response_model=ImageResponseModel,
    status_code=status.HTTP_201_CREATED,
    response_model_by_alias=False,
    response_model_exclude_none=True,
)
async def create_image(
    image_properties: ImageRequestBody = Body(default=None),
    file: UploadFile = File(...)
    ):
    """
    Insert a new image record in to the database.   
    """
    try:
        # write file to local storage and get absolute path to file
        file_path = await write_file(file)
    except Exception as e:
        # if error send internal server error response
        raise HTTPException(
            detail=jsonable_encoder(e),
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        )

    # create dict to instantiate ImageModel
    image_dict = {'name': file.filename, 'local_path': file_path}

    # add fields set in request body to image_dict. (fields must be properties of ImageRequestBody)
    image_dict.update(image_properties.model_dump(exclude_unset=True, exclude_none=True))

    # create an ImageModel using image_dict
    image = ImageModel(**image_dict)

    # create a dict for db excluding `id`.
    # to use given id, set `by_alias=True` & remove exclude `id`
    new_image_dict = image.model_dump(exclude=['id'])

    # insert the new image in db
    insert_result = await db_client.db['images'].insert_one(new_image_dict)

    # add id generated by mongodb to image attributes and return new image
    new_image_dict['id'] = insert_result.inserted_id
    return new_image_dict
