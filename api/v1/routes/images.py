"""Image endpoints
"""
from db.mongodb import db_client
from fastapi import APIRouter, BackgroundTasks, Body, File, status, UploadFile
from models.images import ImageModel, ImageCollection, ImagePostRequestModel,\
    ImagePostResponseModel
from models.tesseract import TesseractConfigRequestModel
from ocr.image_ocr import background_image_ocr


# create a router with `/images` prefix
image_router = APIRouter(prefix='/image')


@image_router.get(
    '/',
    response_description='__List of all images__',
    response_model=ImageCollection,
    response_model_by_alias=False,
    response_model_exclude_none=True,
    tags=['Image']
)
async def list_images():
    """
    ### List all of the images in the database.

    ### The response is unpaginated and limited to 50 results.
    """
    return ImageCollection(images=await db_client.db.images.find().to_list(50))


# Content-type will be multipart/form-data, `image_properties` is a stringfied
# dict which will be converted to dict in `ImageRequestBody` before validation.
# [Reference](https://stackoverflow.com/questions/65504438/how-to-add-both-file-and-json-body-in-a-fastapi-post-request/70640522#70640522)
@image_router.post(
    '/',
    response_description='__Created image__',
    response_model=ImagePostResponseModel,
    status_code=status.HTTP_201_CREATED,
    response_model_by_alias=False,
    response_model_exclude_none=True,
    tags=['Image']
)
async def create_image(
    background_tasks: BackgroundTasks,
    image_properties: ImagePostRequestModel = Body(default=None),
    tesseract_config: TesseractConfigRequestModel = Body(default=None),
    file: UploadFile = File(
        ...,
        description='__Image (MAX 178956970 pixels)__'
    )
):
    """
    ### Insert a new image record into the database, save image in local\
    storage and perform OCR in the background.
    """
    # space in image files replaced by `_`
    file_name = file.filename.replace(' ', '_')

    # name of uploaded image (for db)
    image_dict = {'name': file_name}

    # add fields set in request body to image_dict.
    if image_properties:
        image_dict.update(
            image_properties.model_dump(exclude_none=True))

    # create an ImageModel using image_dict
    image = ImageModel(**image_dict)

    # create a dict for db excluding `id` (default=None). To avoid saving
    # null (unset) fields in db, use (exclude_unset=True, exclude_none=True)
    new_image_dict = image.model_dump(exclude=['id'])

    # insert the new image in db
    insert_result = await db_client.db['images'].insert_one(new_image_dict)

    # add id generated by mongodb to image attributes and return new image
    new_image_dict['id'] = insert_result.inserted_id

    # get a dictionary of tesseract params from request body
    tess_req_dict = tesseract_config.model_dump()

    # read file into buffer & pass buffer to background tasks.
    # can't pass file directly, it is closed before processing.
    file_buffer = await file.read()

    # as a precaution close file. (FastApi closes it after sending response)
    await file.close()

    # add a background task to OCR the image
    background_tasks.add_task(
        background_image_ocr,
        file_buffer,
        new_image_dict,
        tess_req_dict,
    )

    return new_image_dict
